task:
  container:
    image: $ELECTRUM_IMAGE
    cpu: 1
    memory: 1G
  matrix:
    - name: Tox Python $ELECTRUM_PYTHON_VERSION
      env:
        ELECTRUM_IMAGE: python:$ELECTRUM_PYTHON_VERSION
        TOXENV: py3
        ELECTRUM_PYTHON_NAME: python3
      matrix:
       - env:
           ELECTRUM_PYTHON_VERSION: 3.6
       - env:
           ELECTRUM_PYTHON_VERSION: 3.7
       - env:
           ELECTRUM_PYTHON_VERSION: 3.8
       - env:
           ELECTRUM_PYTHON_VERSION: 3.9
       - env:
           ELECTRUM_PYTHON_VERSION: 3
       # Disabled until we merge the libsecp256k1 bump from upstream Electrum.
       #- env:
       #    ELECTRUM_PYTHON_VERSION: rc
    - name: Tox PyPy
      allow_failures: true
      env:
        ELECTRUM_IMAGE: pypy:3
        TOXENV: pypy3
        ELECTRUM_PYTHON_NAME: pypy3
  pip_cache:
    folder: ~/.cache/pip
    fingerprint_script: echo $ELECTRUM_IMAGE && cat $ELECTRUM_REQUIREMENTS
    populate_script: mkdir -p ~/.cache/pip
  electrum_cache:
    folder: /tmp/electrum-build
    populate_script: mkdir -p /tmp/electrum-build
  version_script:
    - $ELECTRUM_PYTHON_NAME --version
  tag_script:
    - git tag
  install_script:
    - apt-get update
    - apt-get -y install libsecp256k1-1
    - pip install -r $ELECTRUM_REQUIREMENTS
  tox_script:
    - tox
  coveralls_script:
    - coveralls
  env:
    ELECTRUM_REQUIREMENTS: contrib/requirements/requirements-travis.txt

task:
  name: Locale
  container:
    image: $ELECTRUM_IMAGE
    cpu: 1
    memory: 1G
  pip_cache:
    folder: ~/.cache/pip
    fingerprint_script: echo Locale && echo $ELECTRUM_IMAGE && cat $ELECTRUM_REQUIREMENTS
    populate_script: mkdir -p ~/.cache/pip
  electrum_cache:
    folder: /tmp/electrum-build
    populate_script: mkdir -p /tmp/electrum-build
  install_script:
    - apt-get update
    - apt-get -y install libsecp256k1-0
    - pip install -r $ELECTRUM_REQUIREMENTS
    - pip install requests
  locale_script:
    - contrib/push_locale
  env:
    ELECTRUM_IMAGE: python:3.7
    ELECTRUM_REQUIREMENTS: contrib/requirements/requirements-travis.txt
  depends_on:
    - Tox Python 3.9
  only_if: $CIRRUS_BRANCH == 'master'

task:
  name: "Regtest functional tests $Binaries"
  compute_engine_instance:
    image_project: cirrus-images
    image: family/docker-builder
    platform: linux
    cpu: 1
    memory: 1G
  pip_cache:
    folder: ~/.cache/pip
    fingerprint_script: echo Regtest && echo docker_builder && cat $ELECTRUM_REQUIREMENTS
    populate_script: mkdir -p ~/.cache/pip
  electrum_cache:
    folder: /tmp/electrum-build
    populate_script: mkdir -p /tmp/electrum-build
  bitcoind_cache:
    folder: /tmp/bitcoind
    populate_script: mkdir -p /tmp/bitcoind
  matrix:
    - env:
        ELECTRUM_PROTOCOL: '1.4.1'
      install_electrumx_script:
        - pip3 install electrumx==1.15.0
    - env:
        ELECTRUM_PROTOCOL: '1.4.3'
      protocol_version_script:
        - sed -i s/1.4.1/$ELECTRUM_PROTOCOL/g electrum_nmc/electrum/version.py
      install_electrumx_script:
        - apt-get update
        - apt-get -y install git
        - git clone https://github.com/JeremyRand/electrumx.git
        - cd electrumx
        - git checkout origin/namecoin-1rt-1.15.0
        - pip3 install .
        - cd ..
  install_script:
    - apt-get update
    - apt-get -y install libsecp256k1-0 curl jq bc
    - pip3 install .[tests]
    - BITCOIND_URL=$(curl https://www.namecoin.org/download/ | grep x86_64-linux-gnu.tar.gz | grep -v 0.13.99 | grep --only-matching https://.*.tar.gz)
    - BITCOIND_FILENAME=$(echo $BITCOIND_URL | grep -E --only-matching 'namecoin-nc.*.tar.gz')
    - BITCOIND_PATH=/tmp/bitcoind/$BITCOIND_FILENAME
    - tar -xaf $BITCOIND_PATH || (rm -f /tmp/bitcoind/* && curl --output $BITCOIND_PATH $BITCOIND_URL && tar -xaf $BITCOIND_PATH)
    - cp -a namecoin-*/* /usr/
  bitcoind_service_background_script:
    - electrum_nmc/electrum/tests/regtest/run_bitcoind.sh
  electrumx_service_background_script:
    - electrum_nmc/electrum/tests/regtest/run_electrumx.sh
  matrix:
    - env:
        Binaries: 'Tarball'
      depends_on:
        - "Flake8 Mandatory"
    - env:
        Binaries: 'AppImage'
      app_image_script:
        - apt-get -y install libfuse2
        - rm run_electrum_nmc
        - VERSION=$(git describe --tags --dirty --always | cut -c 1-7)
        - curl -o run_electrum_nmc https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/AppImage%20build/binaries/dist/electrum-nmc-$VERSION-x86_64.AppImage
        - chmod u+x run_electrum_nmc
      depends_on:
        - "AppImage build"
        - "Flake8 Mandatory"
    - env:
        ELECTRUM_MODE: "GUI"
        QT_QPA_PLATFORM: "offscreen"
        Binaries: "GUI"
      gui_script:
        - apt-get -y install python3-pyqt5 pyqt5-dev-tools 
        - ./contrib/make_qt_forms
        - sleep 10s
        # Use GUI instead of daemon and only change the one in start only (Not to affect the test_unixsockets
        - sed -i '/if \[\[ \$1 == "start" \]\]; then/,/fi/ s/\$agent daemon -d/$agent gui >test.log 2>\&1 \& sleep 15\n pid=$!\necho $pid > "\/tmp\/$2.pid"/' electrum_nmc/electrum/tests/regtest/regtest.sh
  regtest_script:
    - sleep 10s
    - python3 -m unittest electrum_nmc/electrum/tests/regtest.py
  env:
    ELECTRUM_REQUIREMENTS: contrib/requirements/requirements-travis.txt
    # ElectrumX exits with an error without this:
    ALLOW_ROOT: 1

task:
  container:
    image: $ELECTRUM_IMAGE
    cpu: 1
    memory: 1G
  pip_cache:
    folder: ~/.cache/pip
    fingerprint_script: echo Flake8 && echo $ELECTRUM_IMAGE && cat $ELECTRUM_REQUIREMENTS
    populate_script: mkdir -p ~/.cache/pip
  electrum_cache:
    folder: /tmp/electrum-build
    populate_script: mkdir -p /tmp/electrum-build
  install_script:
    - pip install flake8
  flake8_script:
    # Null implementation is deliberately hacky and will not pass lint
    - rm -rf ./electrum_nmc/electrum/null_impl
    - flake8 . --count --select=$ELECTRUM_LINTERS --show-source --statistics
  env:
    ELECTRUM_IMAGE: python:3.7
    ELECTRUM_REQUIREMENTS: contrib/requirements/requirements-travis.txt
  matrix:
    - name: Flake8 Mandatory
      env:
        ELECTRUM_LINTERS: E9,F63,F7,F82
    - name: Flake8 Non-Mandatory
      env:
        ELECTRUM_LINTERS: E,F,W,C90
      allow_failures: true

task:
  name: Windows build
  container:
    dockerfile: contrib/build-wine/Dockerfile
    cpu: 1
    memory: 2G
  build_script:
    - cd contrib/build-wine
    - ./make_win.sh
  binaries_artifacts:
    path: "contrib/build-wine/dist/*"
  env:
    CIRRUS_WORKING_DIR: /opt/wine64/drive_c/electrum-nmc

task:
  name: Android build
  container:
    dockerfile: contrib/android/Dockerfile
    cpu: 2
    memory: 2G
  build_script:
    - ./contrib/android/make_apk
  binaries_artifacts:
    path: "bin/*"

task:
  name: "Regtest functional tests MacOS"
  macos_instance:
    image: macos-monterey-xcode
  pip_cache:
    folder: ~/.cache/pip
    fingerprint_script: echo Regtest && echo macOS && cat $ELECTRUM_REQUIREMENTS
  bitcoind_cache:
    folder: /tmp/bitcoind
    populate_script: mkdir -p /tmp/bitcoind
  matrix:
    - env:
        ELECTRUM_PROTOCOL: '1.4.1'
      install_electrumx_script:
        - brew install leveldb
        - export LIBRARY_PATH="$LIBRARY_PATH:$(brew --prefix)/lib"
        - export CPATH="$CPATH:$(brew --prefix)/include"
        - CFLAGS="-I/opt/homebrew/include/ -L/opt/homebrew/lib/ -fno-rtti" pip3 install --force-reinstall --global-option="build_ext" plyvel --no-cache-dir
        - pip3 install electrumx==1.15.0
        - PYTHON_VERSION=$(python3 -c "print('.'.join(map(str, __import__('sys').version_info[:2])))")
        # Workaround for macOS limitation: To prevent ElectrumX from setting the maximum allowed sessions to zero
        - sed -i '' 's/return value/return 200/g' /Users/$USER/Library/Python/$PYTHON_VERSION/lib/python/site-packages/electrumx/server/env.py
    - env:
        ELECTRUM_PROTOCOL: '1.4.3'
      protocol_version_script:
        - sed -i.bak s/1.4.1/$ELECTRUM_PROTOCOL/g electrum_nmc/electrum/version.py
      install_electrumx_script:
        - brew install leveldb
        - export LIBRARY_PATH="$LIBRARY_PATH:$(brew --prefix)/lib"
        - export CPATH="$CPATH:$(brew --prefix)/include"
        - CFLAGS="-I/opt/homebrew/include/ -L/opt/homebrew/lib/ -fno-rtti" pip3 install --force-reinstall --global-option="build_ext" plyvel --no-cache-dir
        - git clone https://github.com/JeremyRand/electrumx.git
        - cd electrumx
        - git checkout origin/namecoin-1rt-1.15.0
        - pip3 install .
        - cd ..
        - PYTHON_VERSION=$(python3 -c "print('.'.join(map(str, __import__('sys').version_info[:2])))")
        # Workaround for macOS limitation: To prevent ElectrumX from setting the maximum allowed sessions to zero
        - sed -i '' 's/return value/return 200/g' /Users/$USER/Library/Python/$PYTHON_VERSION/lib/python/site-packages/electrumx/server/env.py 
  install_script:
    - ELECTRUM_VERSION=$(grep -o "ELECTRUM_VERSION = '.*'" electrum_nmc/electrum/version.py | awk -F"'" '{print $2}')
    - curl -o Electrum-NMC.tar.gz https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/tarball%20build/binaries/dist/Electrum-NMC-$ELECTRUM_VERSION.tar.gz
    - tar -xzf Electrum-NMC.tar.gz
    - cp -a electrum_nmc/electrum/tests Electrum*/electrum_nmc/electrum/
    # Avoiding descriptor warnings, weirdly no other method works
    - sed -i '' 's/from google\.protobuf import descriptor as _descriptor/try:\n  from google.protobuf import descriptor as _descriptor\n  _descriptor._Deprecated.count = 0\nexcept Exception:\n  pass/' Electrum*/electrum_nmc/electrum/paymentrequest_pb2.py
    # Bitcoin Core uses a different home directory on macOS
    - sed -i '' 's#^mkdir -p ~/.namecoin#mkdir -p "/Users/$USER/Library/Application Support/Namecoin"#' electrum_nmc/electrum/tests/regtest/run_bitcoind.sh
    - sed -i '' 's#^cat > ~/.namecoin/namecoin.conf#cat > "/Users/$USER/Library/Application Support/Namecoin/namecoin.conf"#' electrum_nmc/electrum/tests/regtest/run_bitcoind.sh
    - pip3 install .[tests]
    - brew install autoconf automake libtool coreutils jq screen
    - Electrum*/contrib/make_libsecp256k1.sh
    - BITCOIND_URL=$(curl -s https://www.namecoin.org/download/ | grep osx64 | grep -v 0.13.99 | awk -F'"' '/https:\/\/.*\.tar\.gz/{print $2}')
    - BITCOIND_FILENAME=$(echo $BITCOIND_URL | grep -E --only-matching 'namecoin-nc.*.tar.gz')
    - BITCOIND_PATH=/tmp/bitcoind/$BITCOIND_FILENAME
    - tar -xzf $BITCOIND_PATH || (rm -f /tmp/bitcoind/* && curl --output $BITCOIND_PATH $BITCOIND_URL && tar -xzf $BITCOIND_PATH)
    - sudo cp -a namecoin-*/* /usr/local
  bitcoind_service_background_script:
    - electrum_nmc/electrum/tests/regtest/run_bitcoind.sh
  electrumx_service_background_script:
    - PYTHON_VERSION=$(python3 -c "print('.'.join(map(str, __import__('sys').version_info[:2])))")
    - export PATH="/Users/$USER/Library/Python/$PYTHON_VERSION/bin:$PATH"
    - electrum_nmc/electrum/tests/regtest/run_electrumx.sh
  regtest_script:
    - cd Electrum*/
    - sleep 20
    - python3 -m unittest electrum_nmc/electrum/tests/regtest.py
  env:
    ELECTRUM_REQUIREMENTS: contrib/requirements/requirements.txt
    # ElectrumX exits with an error without this:
    ALLOW_ROOT: 1
  depends_on:
    - "tarball build"

task:
  name: AppImage build
  container:
    dockerfile: contrib/build-linux/appimage/Dockerfile
    cpu: 2
    memory: 1G
  build_script:
    #- ./contrib/build-linux/appimage/make_appimage.sh
    - ./contrib/build-linux/appimage/build.sh
  binaries_artifacts:
    path: "dist/*"

task:
  container:
    dockerfile: contrib/build-linux/sdist/Dockerfile
    cpu: 1
    memory: 1G
  build_script:
    #- ./contrib/build-linux/sdist/make_sdist.sh
    - ./contrib/build-linux/sdist/build.sh
  binaries_artifacts:
    path: "dist/*"
  matrix:
    - name: tarball build
    - name: source-only tarball build
      env:
        OMIT_UNCLEAN_FILES: 1

task:
  name: Submodules
  container:
    image: python:3.7
    cpu: 1
    memory: 1G
  fetch_script:
    - git fetch --all --tags
  check_script:
    - ./contrib/deterministic-build/check_submodules.sh
  only_if: $CIRRUS_TAG != ''

task:
  name: Rebranding check
  container:
    image: python:3.7
    cpu: 1
    memory: 1G
  check_script:
    - ./contrib/check_nmc_rebranding
